#!/usr/bin/env python

import time
import picamera
import numpy as np
import cv2
import traceback
from pylepton import Lepton
import pigpio

HORIZONTAL_PIN = 18
VERTICAL_PIN = 4
MIN_PULSEWIDTH = 600
MAX_PULSEWIDTH = 2400



def main(flip_v = False, alpha = 128, device = "/dev/spidev0.0"):
  # Create an array representing a 1280x720 image of
  # a cross through the center of the display. The shape of
  # the array must be of the form (height, width, color)
  a = np.zeros((240, 320, 3), dtype=np.uint8)
  lepton_buf = np.zeros((60, 80, 1), dtype=np.uint16)
  
  currentx = 90
  currenty = 90
  
  #printDone = 0
  #f = open('data.txt','w')
  pi = pigpio.pi()
  pi.set_servo_pulsewidth(HORIZONTAL_PIN, 1500) #Set to 90 deg
  pi.set_servo_pulsewidth(VERTICAL_PIN, 1500)

  with picamera.PiCamera() as camera:
    camera.resolution = (640, 480)
    camera.framerate = 24
    camera.vflip = flip_v
    camera.start_preview()
    camera.fullscreen = True
    # Add the overlay directly into layer 3 with transparency;
    # we can omit the size parameter of add_overlay as the
    # size is the same as the camera's resolution
    o = camera.add_overlay(np.getbuffer(a), size=(320,240), layer=3, alpha=int(alpha), crop=(0,0,80,60), vflip=flip_v)
    try:
      time.sleep(0.2) # give the overlay buffers a chance to initialize
      with Lepton(device) as l:
        last_nr = 0
        while True:
          _,nr = l.capture(lepton_buf)
          if nr == last_nr:
            # no need to redo this frame
            continue
          last_nr = nr
          cv2.normalize(lepton_buf, lepton_buf, 0, 65535, cv2.NORM_MINMAX)
          np.right_shift(lepton_buf, 8, lepton_buf)
          a[:lepton_buf.shape[0], :lepton_buf.shape[1], :] = lepton_buf
          o.update(np.getbuffer(a)) # this line adds lepton heat image onto camera image
	  """  
	  # Print out lepton_buf into a .csv file to view values
	    if (printDone == 0):
	      j = 0
	      k = 0
	      while j < 60:
	        while k < 80:
	    	  f.write(str(lepton_buf[j][k]) + '\t')
	 	  k+=1
	        j+=1
	        f.write('\n')
	        k=0
	      printDone = 1
	      f.close()
	  """  
          upper = -1
	  leftmost = 100
	  rightmost = -1
          r = 15
          c = 39

	  while r < 20:
	    while c >= 0:
	      if (lepton_buf[r][c] >= 80 and lepton_buf[r][c] <= 275):
                upper = r
		if (c < leftmost):
		  leftmost = c
              c -= 1
	    if (leftmost == 100):
	      c = 40
	      while c < 80:
		if (lepton_buf[r][c] >= 80 and lepton_buf[r][c] <= 275):
	          upper = r
		  if (c < leftmost):
		    leftmost = c
                c += 1
            if (leftmost != 100):
	      c = leftmost
	      rightmost = leftmost
              while (c < 80):
	        if (lepton_buf[r][c] >= 80 and lepton_buf[r][c] <= 275):
		  rightmost = c
                c += 1
	    if (upper != -1):
	      break
	    c = 0
            r += 1
         
          xcenter = (leftmost + rightmost) / 2
          ycenter = upper

	  if (xcenter < 30):
	    currentx += 3
	    if (currentx > 180):
	      currentx = 180
	  elif (xcenter > 50):
	    currentx -= 3
	    if (currentx < 0):
	      currentx = 0
	  if (ycenter < 15):
	    currenty -= 1
            if (currenty < 0):
              currenty = 0
          elif (ycenter > 20):
            currenty += 1
            if (currenty > 180):
              currenty = 180

	  xpulse = currentx * 10 + 600
	  ypulse = currenty * 10 + 600
	
	  # ANGLE * 10 + 600 = PULSEWIDTH
	  # PULSEWIDTH can be between 600 and 2400          

          pi.set_servo_pulsewidth(HORIZONTAL_PIN, xpulse)
	  pi.set_servo_pulsewidth(VERTICAL_PIN, ypulse)

    except Exception:
      traceback.print_exc()
    finally:
      camera.remove_overlay(o)
      pi.stop()

if __name__ == '__main__':
  from optparse import OptionParser

  usage = "usage: %prog [options] output_file[.format]"
  parser = OptionParser(usage=usage)

  parser.add_option("-f", "--flip-vertical",
                    action="store_true", dest="flip_v", default=False,
                    help="flip the output images vertically")

  parser.add_option("-a", "--alpha",
                    dest="alpha", default=255,
                    help="set lepton overlay opacity")

  parser.add_option("-d", "--device",
                    dest="device", default="/dev/spidev0.0",
                    help="specify the spi device node (might be /dev/spidev0.1 on a newer device)")

  (options, args) = parser.parse_args()

  main(flip_v = options.flip_v, alpha = options.alpha, device = options.device)
